---
heat_template_version: 2017-09-01

description: >
  This template will create a Cinder volume, attach it to a Nova instance and
  configure the Neutron for it.

parameters:
  availability_zone:
    type: string
    description: The Availability Zone to create the volume.
    default: nova
  flavor:
    type: string
    label: Instance Type
    description: Type of instance (flavor) to be used.
    default: m1.tiny
  image:
    type: string
    label: Image ID
    description: Image to be used for compute instance.
  key_name:
    type: string
    label: Key Name
    description: Name of key-pair to be used for compute instance.
    constraints:
      - custom_constraint: nova.keypair
  server_data:
    type: json
    label: Metadata
    description: Metadata for the VM.
  name:
    type: string
    label: Instance name
    description: The compute instance name

  hypadmin_network:
    type: string
  ceph_mgmt_network:
    type: string
  ceph_cluster_network:
    type: string
  internal_network:
    type: string

  hypadmin_ip:
    type: string
    constraints:
      - custom_constraint: ip_addr
  ceph_mgmt_ip:
    type: string
    constraints:
      - custom_constraint: ip_addr
  ceph_cluster_ip:
    type: string
    constraints:
      - custom_constraint: ip_addr
  internal_ip:
    type: string
    constraints:
      - custom_constraint: ip_addr

  internal_vip:
    type: string
    constraints:
      - custom_constraint: ip_addr

  instance_security_group:
    type: string

  volume_size_docker:
    type: string
    description: Size of the attached volume.
    default: 50
  volume_size_ceph:
    type: string
    description: Size of the attached volume.
    default: 30

resources:
  port_hypadmin:
    type: OS::Neutron::Port
    properties:
      network_id: { get_param: hypadmin_network }
      security_groups: { get_param: instance_security_group }
      fixed_ips:
        - ip_adress: { get_param: hypadmin_ip }

  port_ceph_mgmt:
    type: OS::Neutron::Port
    properties:
      network_id: { get_param: ceph_mgmt_network }
      security_groups: { get_param: instance_security_group }
      fixed_ips:
        - ip_adress: { get_param: ceph_mgmt_ip }

  port_ceph_cluster:
    type: OS::Neutron::Port
    properties:
      network_id: { get_param: ceph_cluster_network }
      security_groups: { get_param: instance_security_group }
      fixed_ips:
        - ip_adress: { get_param: ceph_cluster_ip }

  port_internal:
    type: OS::Neutron::Port
    properties:
      network_id: { get_param: internal_network }
      security_groups: { get_param: instance_security_group }
      fixed_ips:
        - ip_adress: { get_param: internal_ip }
      allowed_address_pairs:
        - ip_adress: { get_param: internal_vip }

  volume_docker:
    type: OS::Cinder::Volume
    properties:
      availability_zone: { get_param: availability_zone }
      size: { get_param: volume_size_docker }

  volume_ceph:
    type: OS::Cinder::Volume
    properties:
      availability_zone: { get_param: availability_zone }
      size: { get_param: volume_size_ceph }

  instance_compute:
    type: OS::Nova::Server
    properties:
      image:    { get_param: image }
      flavor:   { get_param: flavor }
      key_name: { get_param: key_name }
      metadata: { get_param: server_data }
      name:     { get_param: name }
      networks:
        - port: { get_resource: port_hypadmin }
        - port: { get_resource: port_ceph_mgmt }
        - port: { get_resource: port_ceph_cluster }
        - port: { get_resource: port_internal }

  instance_volume_attach_main:
    type: OS::Cinder::VolumeAttachment
    properties:
      instance_uuid: { get_resource: instance_compute }
      volume_id: { get_resource: volume_docker }
      mountpoint: /dev/sdb

  instance_volume_attach_sec:
    type: OS::Cinder::VolumeAttachment
    properties:
      instance_uuid: { get_resource: instance_compute }
      volume_id: { get_resource: volume_ceph }
      mountpoint: /dev/sdc

outputs:
  private_ip:
    description: IP address of instance in private network
    value: { get_attr: [ instance_compute, first_address ] }
  #public_ip:
  #  description: Floating IP address of instance in public network
  #  value: { get_attr: [ instance_floating_ip, floating_ip_address ] }
